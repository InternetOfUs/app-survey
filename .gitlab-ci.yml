---
image: docker:20.10.2

services:
  - docker:20.10.2-dind

#
# Pipeline cache is based on CI_COMMIT_REF_SLUG.
#
cache:
  key: ${CI_COMMIT_REF_SLUG}

#
# Docker variables for allowing image build.
#
variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: "tcp://docker:2375"
  GIT_SUBMODULE_STRATEGY: recursive

#
# Workflow defining rules for running the pipeline.
# In the following cases the pipeline is not run when:
#  - the associated commit includes the work-in-progress tag `-wip`
#  - the associated commit message includes the pattern `Merge tag`: the commit resulting when
#    a release branch is closed and merged into `develop`
#
workflow:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /-wip/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /Merge tag/
      when: never
    - when: always

#
# Static script to be reused by the enabled stages.
#

.apk-before-script: &apk-before-script
  # Install required apk packages.
  - apk add --update bash wget ca-certificates openssl git tar openssh-client curl python3 py3-pip

# Script for docker based stages.
.docker-script: &docker-script
  - docker login registry.u-hopper.com -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD

# Scripts for installing Ansible and the associated roles directly from the Lab.
.ansible-script: &ansible-script
  # Install and run ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use an RPM-based image)
  - 'which ssh-agent || apk add openssh-client'
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  # We're using tr to fix line endings which makes ed25519 keys work
  # without extra base64 encoding.
  # https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556

  # Configure .ssh folder
  - mkdir -p ~/.ssh
  - ssh-keyscan -p 4422 lab.u-hopper.com >> gitlabKey
  - ssh-keygen -lf gitlabKey
  - cat gitlabKey  >> ~/.ssh/known_hosts
  - chmod 700 ~/.ssh

  - apk add --update ansible ansible-lint

# Scripts for allowing the build of php/yii2 projects
# that require composer for installing dependencies.
.php-script: &php-script
  - apk add --update php7 php7-phar php7-json php7-iconv php7-openssl
  - curl --show-error --silent https://getcomposer.org/installer | php

# Script for allowing the connection to a remote server for completing a deployment.
.remote-server-connection: &remote-server-connection
  # Configure .ssh folder
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  # The USER_DEPLOY_SSH_KEY contains the private key granting access to the deployment server
  - echo "$USER_DEPLOY_SSH_KEY" > ~/.ssh/id_rsa
  - chmod 400  ~/.ssh/id_rsa
  - export ANSIBLE_HOST_KEY_CHECKING=False


#
# Stages to run.
#

stages:
  - build
  - test
  - push
  - deploy
  - stop


#
# Stages for mr.
#


build:mr:
  stage: build
  script:
    - *apk-before-script
    - *docker-script

    - ./docker-support/runner.sh -bs latest
  artifacts:
    paths:
      - docker_image.tar.gz
    expire_in: 1 day
  when: manual
  allow_failure: false
  only:
    - merge_requests


test:mr:
  stage: test
  script:
    - *apk-before-script
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -t latest
  dependencies:
    - build:mr
  only:
    - merge_requests


#
# Stages for issue.
#


build:issue:
  stage: build
  script:
    - *apk-before-script
    - *docker-script

    - ./docker-support/runner.sh -bs latest
  artifacts:
    paths:
      - docker_image.tar.gz
    expire_in: 1 day
  when: manual
  allow_failure: false
  only:
    - /^feature.*$/i
    - /^hotfix.*$/i
    - /^milestone.*$/i


test:issue:
  stage: test
  script:
    - *apk-before-script
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -t latest
  dependencies:
    - build:issue
  only:
    - /^feature.*$/i
    - /^hotfix.*$/i
    - /^milestone.*$/i


push:issue:
  stage: push
  script:
    - *apk-before-script
    - *docker-script
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -p latest
  dependencies:
    - build:issue
    - test:issue
  only:
    - /^feature.*$/i
    - /^hotfix.*$/i
    - /^milestone.*$/i


deploy:issue:
  stage: deploy
  image: public.registry.u-hopper.com/alpine:3.13
  allow_failure: false
  dependencies:
    - push:issue
  script:
    - *apk-before-script
    - *ansible-script
    - *remote-server-connection

    # The ANSIBLE_ROLE_PRIVATE_KEY variable contains a private key granting access
    # to our private ansible roles on GitLab. This key is used to clone the roles
    # during the pipeline execution.
    - echo "$ANSIBLE_ROLE_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - cd deployment
    - ansible-galaxy install -r requirements.yml -f
    - echo $ANSIBLE_VAULT_PASSWORD > password_file

    - ansible-playbook -i inventory/issue/hosts --vault-password-file password_file playbook.yml
  environment:
    name: issue
    on_stop: stop:issue
  only:
    - /^feature.*$/i
    - /^hotfix.*$/i
    - /^milestone.*$/i
  when: manual


stop:issue:
  stage: deploy
  image: public.registry.u-hopper.com/alpine:3.13
  allow_failure: false
  dependencies:
    - push:issue
  script:
    - *apk-before-script
    - *ansible-script
    - *remote-server-connection

    # The ANSIBLE_ROLE_PRIVATE_KEY variable contains a private key granting access
    # to our private ansible roles on GitLab. This key is used to clone the roles
    # during the pipeline execution.
    - echo "$ANSIBLE_ROLE_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - cd deployment
    - ansible-galaxy install -r requirements.yml -f
    - echo $ANSIBLE_VAULT_PASSWORD > password_file

    - ansible-playbook -i inventory/issue/hosts --vault-password-file password_file --extra-vars "tear_down=True" playbook.yml
  environment:
    name: issue
    action: stop
  when: manual
  only:
    - /^feature.*$/i
    - /^hotfix.*$/i
    - /^milestone.*$/i


#
# Stages for staging.
#


build:staging:
  stage: build
  script:
    - *apk-before-script
    - *docker-script

    - ./docker-support/runner.sh -bs latest
  artifacts:
    paths:
      - docker_image.tar.gz
    expire_in: 1 day
  only:
    - develop


test:staging:
  stage: test
  script:
    - *apk-before-script
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -t latest
  dependencies:
    - build:staging
  only:
    - develop


push:staging:
  stage: push
  script:
    - *apk-before-script
    - *docker-script
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -p latest
  dependencies:
    - build:staging
    - test:staging
  only:
    - develop


deploy:staging:
  stage: deploy
  image: public.registry.u-hopper.com/alpine:3.13
  allow_failure: false
  dependencies:
    - push:staging
  script:
    - *apk-before-script
    - *ansible-script
    - *remote-server-connection

    # The ANSIBLE_ROLE_PRIVATE_KEY variable contains a private key granting access
    # to our private ansible roles on GitLab. This key is used to clone the roles
    # during the pipeline execution.
    - echo "$ANSIBLE_ROLE_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - cd deployment
    - ansible-galaxy install -r requirements.yml -f
    - echo $ANSIBLE_VAULT_PASSWORD > password_file

    - ansible-playbook -i inventory/staging/hosts --vault-password-file password_file playbook.yml
  environment:
    name: staging
    on_stop: stop:staging
  only:
    - develop
  when: manual


stop:staging:
  stage: deploy
  image: public.registry.u-hopper.com/alpine:3.13
  allow_failure: false
  dependencies:
    - push:staging
  script:
    - *apk-before-script
    - *ansible-script
    - *remote-server-connection

    # The ANSIBLE_ROLE_PRIVATE_KEY variable contains a private key granting access
    # to our private ansible roles on GitLab. This key is used to clone the roles
    # during the pipeline execution.
    - echo "$ANSIBLE_ROLE_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - cd deployment
    - ansible-galaxy install -r requirements.yml -f
    - echo $ANSIBLE_VAULT_PASSWORD > password_file

    - ansible-playbook -i inventory/staging/hosts --vault-password-file password_file --extra-vars "tear_down=True" playbook.yml
  environment:
    name: staging
    action: stop
  when: manual
  only:
    - develop


#
# Stages for production.
#


build:production:
  stage: build
  script:
    - *apk-before-script
    - *docker-script

    - ./docker-support/runner.sh -bs $CI_COMMIT_TAG
  artifacts:
    paths:
      - docker_image.tar.gz
    expire_in: 1 day
  only:
    - tags


test:production:
  stage: test
  script:
    - *apk-before-script
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -t $CI_COMMIT_TAG
  dependencies:
    - build:production
  only:
    - tags


push:production:
  stage: push
  script:
    - *apk-before-script
    - *docker-script
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -p $CI_COMMIT_TAG
  dependencies:
    - build:production
    - test:production
  only:
    - tags


deploy:production:
  stage: deploy
  image: public.registry.u-hopper.com/alpine:3.13
  allow_failure: false
  dependencies:
    - push:production
  script:
    - *apk-before-script
    - *ansible-script
    - *remote-server-connection

    # The ANSIBLE_ROLE_PRIVATE_KEY variable contains a private key granting access
    # to our private ansible roles on GitLab. This key is used to clone the roles
    # during the pipeline execution.
    - echo "$ANSIBLE_ROLE_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - cd deployment
    - ansible-galaxy install -r requirements.yml -f
    - echo $ANSIBLE_VAULT_PASSWORD > password_file

    - ansible-playbook -i inventory/production/hosts --vault-password-file password_file playbook.yml
  environment:
    name: production
    on_stop: stop:production
  only:
    - tags
  when: manual


stop:production:
  stage: deploy
  image: public.registry.u-hopper.com/alpine:3.13
  allow_failure: false
  dependencies:
    - push:production
  script:
    - *apk-before-script
    - *ansible-script
    - *remote-server-connection

    # The ANSIBLE_ROLE_PRIVATE_KEY variable contains a private key granting access
    # to our private ansible roles on GitLab. This key is used to clone the roles
    # during the pipeline execution.
    - echo "$ANSIBLE_ROLE_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - cd deployment
    - ansible-galaxy install -r requirements.yml -f
    - echo $ANSIBLE_VAULT_PASSWORD > password_file

    - ansible-playbook -i inventory/production/hosts --vault-password-file password_file --extra-vars "tear_down=True" playbook.yml
  environment:
    name: production
    action: stop
  when: manual
  only:
    - tags


# 
# Stages for default branch.
# Allows to build badges and run the test coverage.
# 

build:badges:
  stage: build
  image: public.registry.u-hopper.com/python:3.8
  script:
    - pip install PyYAML anybadge
    - python docker-support/badges.py
  artifacts:
    paths:
      - template.svg
      - deploy.svg
      - wenet-common.svg
    expire_in: 1 day
  only:
    - main

build:main:
  stage: build
  script:
    - *apk-before-script
    - *docker-script
    - ./docker-support/runner.sh -bs latest
  artifacts:
    paths:
      - docker_image.tar.gz
    expire_in: 1 day
  only:
    - main

test:coverage:
  stage: test
  script:
    - *apk-before-script
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -c latest
  dependencies:
    - build:main
  only:
    - main
